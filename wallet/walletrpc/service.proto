// RUN `go generate` in this directory when updating the service.proto. Requires the protoc command to be in your path.
syntax = "proto3";
package walletrpc;

option go_package = "walletrpc";

import "google/api/annotations.proto";

message SerializableSignature {
  repeated bool signers = 1;
  bytes signature = 2;
  string type = 3;
}

message SerializableChainTree {
  repeated bytes dag = 1;
  map<string, SerializableSignature> signatures = 2;
  // tip is a string because of compatability with the javascript layer
  // which cannot seem to parse a golang cid.Bytes()
  string tip = 3;
}

message RegisterWalletRequest {
}

message RegisterWalletResponse {
  string wallet_name = 1;
}

message StorageAdapterConfigForBadger {
  string path = 1;
}

message StorageAdapterConfigForIpld {
  string path = 1;
  string address = 2;
  bool offline = 3;
}

message StorageAdapterConfig {
  oneof adapter_config {
    StorageAdapterConfigForBadger badger = 1;
    StorageAdapterConfigForIpld ipld = 2;
  }
}

message GenerateChainRequest {
  string key_addr = 2;
  StorageAdapterConfig storage_adapter = 3;
}

message GenerateChainResponse {
  string chain_id = 1;
}

message ExportChainRequest {
  string chain_id = 2;
}

message ExportChainResponse {
  string chain_tree = 1;
}

message ImportChainRequest {
  // index 2 is a deleted key, intentionally omitted
  string chain_tree = 3;
  StorageAdapterConfig storage_adapter = 4;
}

message ImportChainResponse {
  string chain_id = 1;
}

message GenerateKeyRequest {
}

message GenerateKeyResponse {
  string key_addr = 1;
}

message GetTipRequest {
  string chain_id = 2;
}

message GetTipResponse {
  string tip = 1;
}

message ListChainIdsRequest {
}

message ListChainIdsResponse {
  repeated string chain_ids = 1;
}

message ListKeysRequest {
}

message ListKeysResponse {
  repeated string key_addrs = 1;
}

message SetOwnerRequest {
  string chain_id = 2;
  string key_addr = 3;
  repeated string new_owner_keys = 4;
}

message SetOwnerResponse {
  string tip = 1;
}

message SetDataRequest {
  string chain_id = 2;
  string key_addr = 3;
  string path = 4;
  bytes value = 5;
}

message SetDataResponse {
  string tip = 1;
}

message ResolveRequest {
  string chain_id = 2;
  string path = 3;
}

message ResolveResponse {
  string remaining_path = 1;
  bytes data = 2;
}

message EstablishCoinRequest {
  string chain_id = 2;
  string key_addr = 3;
  string coin_name = 4;
  uint64 maximum = 5;
}

message EstablishCoinResponse {
  string tip = 1;
}

message MintCoinRequest {
  string chain_id = 2;
  string key_addr = 3;
  string coin_name = 4;
  uint64 amount = 5;
}

message MintCoinResponse {
  string tip = 1;
}

service WalletRPCService {
  rpc Register (RegisterWalletRequest) returns (RegisterWalletResponse) {
    option (google.api.http) =
      {
       post: "/api/v1/wallets"
      };
  };

  rpc GenerateKey (GenerateKeyRequest) returns (GenerateKeyResponse){
    option (google.api.http) =
      {
       post: "/api/v1/keys"
      };
  };

  rpc CreateChainTree (GenerateChainRequest) returns (GenerateChainResponse){
    option (google.api.http) =
      {
       post: "/api/v1/keys/{key_addr}/chains"
      };
  };

  rpc ExportChainTree (ExportChainRequest) returns (ExportChainResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}"
      };
  };

  rpc ImportChainTree (ImportChainRequest) returns (ImportChainResponse){
    option (google.api.http) =
      {
       post: "/api/v1/chains"
       body: "*"
      };
  };

  rpc GetTip (GetTipRequest) returns (GetTipResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}/tip"
      };
  };

  rpc ListChainIds (ListChainIdsRequest) returns (ListChainIdsResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains"
      };
  };

  rpc ListKeys (ListKeysRequest) returns (ListKeysResponse){
    option (google.api.http) =
      {
       get: "/api/v1/keys"
      };
  };

  rpc SetOwner (SetOwnerRequest) returns (SetOwnerResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}/owner"
       body: "*"
      };
  };

  rpc SetData (SetDataRequest) returns (SetDataResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}/data"
       body: "*"
      };
  };

  rpc Resolve (ResolveRequest) returns (ResolveResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}/data"
      };
  };

  rpc EstablishCoin (EstablishCoinRequest) returns (EstablishCoinResponse){
    option (google.api.http) =
      {
       post: "/api/v1/chains/{chain_id}/tokens"
       body: "*"
      };
  };

  rpc MintCoin (MintCoinRequest) returns (MintCoinResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}/tokens/{coin_name}"
       body: "*"
      };
  };
}
