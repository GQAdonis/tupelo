// RUN `go generate` in this directory when updating the service.proto. Requires the protoc command to be in your path.
syntax = "proto3";
package walletrpc;

option go_package = "walletrpc";

import "google/api/annotations.proto";

message ProtoSetDataPayload {
  string path = 1;
  bytes value = 2;
}

message ProtoSetOwnershipPayload {
  repeated string authentication = 1;
}

message ProtoTokenMonetaryPolicy{
  uint64 maximum = 1;
}

message ProtoEstablishTokenPayload{
  string name = 1;
  ProtoTokenMonetaryPolicy monetary_policy = 2;
}

message ProtoMintTokenPayload{
  string name = 1;
  uint64 amount = 2;
}

message ProtoTransaction{
  enum Type {
    UNKNOWN = 0;
    SETDATA = 1;
    SETOWNERSHIP = 2;
    ESTABLISHTOKEN = 3;
    MINTTOKEN = 4;
    STAKE = 5;
  }

  Type type = 1;
  oneof payload {
    ProtoSetDataPayload set_data_payload = 2;
    ProtoSetOwnershipPayload set_ownership_payload = 3;
    ProtoEstablishTokenPayload establish_token_payload = 4;
    ProtoMintTokenPayload mint_token_payload = 5;
  }
}

message SerializableSignature {
  repeated bool signers = 1;
  bytes signature = 2;
  string type = 3;
  bytes object_id = 4;
  bytes previous_tip = 5;
  bytes new_tip = 6;
  uint64 view = 7;
  uint64 cycle = 8;
  uint64 height = 9;
}

message SerializableChainTree {
  repeated bytes dag = 1;
  map<string, SerializableSignature> signatures = 2;
  // tip is a string because of compatability with the javascript layer
  // which cannot seem to parse a golang cid.Bytes()
  string tip = 3;
}

message RegisterWalletRequest {
}

message RegisterWalletResponse {
  string wallet_name = 1;
}

message StorageAdapterConfigForBadger {
  string path = 1;
}

message StorageAdapterConfigForIpld {
  string path = 1;
  string address = 2;
  bool offline = 3;
}

message StorageAdapterConfig {
  oneof adapter_config {
    StorageAdapterConfigForBadger badger = 1;
    StorageAdapterConfigForIpld ipld = 2;
  }
}

message GenerateChainRequest {
  string key_addr = 2;
  StorageAdapterConfig storage_adapter = 3;
}

message GenerateChainResponse {
  string chain_id = 1;
}

message ExportChainRequest {
  string chain_id = 2;
}

message ExportChainResponse {
  string chain_tree = 1;
}

message ImportChainRequest {
  // index 2 is a deleted key, intentionally omitted
  string chain_tree = 3;
  StorageAdapterConfig storage_adapter = 4;
}

message ImportChainResponse {
  string chain_id = 1;
}

message GenerateKeyRequest {
}

message GenerateKeyResponse {
  string key_addr = 1;
}

message GetTipRequest {
  string chain_id = 2;
}

message GetTipResponse {
  string tip = 1;
}

message ListChainIdsRequest {
}

message ListChainIdsResponse {
  repeated string chain_ids = 1;
}

message ListKeysRequest {
}

message ListKeysResponse {
  repeated string key_addrs = 1;
}

message SetOwnerRequest {
  string chain_id = 2;
  string key_addr = 3;
  repeated string new_owner_keys = 4;
}

message SetOwnerResponse {
  string tip = 1;
}

message SetDataRequest {
  string chain_id = 2;
  string key_addr = 3;
  string path = 4;
  bytes value = 5;
}

message SetDataResponse {
  string tip = 1;
}

message ResolveRequest {
  string chain_id = 2;
  string path = 3;
}

message ResolveResponse {
  string remaining_path = 1;
  bytes data = 2;
}

message ResolveAtRequest {
  string chain_id = 2;
  string tip = 3;
  string path = 4;
}

message EstablishTokenRequest {
  string chain_id = 2;
  string key_addr = 3;
  string token_name = 4;
  uint64 maximum = 5;
}

message EstablishTokenResponse {
  string tip = 1;
}

message MintTokenRequest {
  string chain_id = 2;
  string key_addr = 3;
  string token_name = 4;
  uint64 amount = 5;
}

message MintTokenResponse {
  string tip = 1;
}

message SendTokenRequest {
  string chain_id = 2;
  string key_addr = 3;
  string token_name = 4;
  string destination_chain_id = 5;
  uint64 amount = 6;
}

message SendTokenResponse {
  string send_token = 1;
}

message TokenPayload {
  string transaction_id = 1;
  string tip = 2;
  SerializableSignature signature = 3;
  repeated bytes leaves = 4;
}

message ReceiveTokenRequest {
  string chain_id = 2;
  string key_addr = 3;
  string token_payload = 4;
}

message ReceiveTokenResponse {
  string tip = 1;
}

message PlayTransactionsRequest {
  string chain_id = 2;
  string key_addr = 3;
  repeated ProtoTransaction transactions = 4;
}

message PlayTransactionsResponse {
  string tip = 1;
}

service WalletRPCService {
  rpc Register (RegisterWalletRequest) returns (RegisterWalletResponse) {
    option (google.api.http) =
      {
       post: "/api/v1/wallets"
      };
  };

  rpc GenerateKey (GenerateKeyRequest) returns (GenerateKeyResponse){
    option (google.api.http) =
      {
       post: "/api/v1/keys"
      };
  };

  rpc CreateChainTree (GenerateChainRequest) returns (GenerateChainResponse){
    option (google.api.http) =
      {
       post: "/api/v1/keys/{key_addr}/chains"
      };
  };

  rpc ExportChainTree (ExportChainRequest) returns (ExportChainResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}"
      };
  };

  rpc ImportChainTree (ImportChainRequest) returns (ImportChainResponse){
    option (google.api.http) =
      {
       post: "/api/v1/chains"
       body: "*"
      };
  };

  rpc GetTip (GetTipRequest) returns (GetTipResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}/tip"
      };
  };

  rpc ListChainIds (ListChainIdsRequest) returns (ListChainIdsResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains"
      };
  };

  rpc ListKeys (ListKeysRequest) returns (ListKeysResponse){
    option (google.api.http) =
      {
       get: "/api/v1/keys"
      };
  };

  rpc SetOwner (SetOwnerRequest) returns (SetOwnerResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}/owner"
       body: "*"
      };
  };

  rpc SetData (SetDataRequest) returns (SetDataResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}/data"
       body: "*"
      };
  };

  rpc Resolve (ResolveRequest) returns (ResolveResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}/data"
      };
  };

  rpc ResolveAt (ResolveAtRequest) returns (ResolveResponse){
    option (google.api.http) =
      {
       get: "/api/v1/chains/{chain_id}/data"
      };
  };

  rpc EstablishToken (EstablishTokenRequest) returns (EstablishTokenResponse){
    option (google.api.http) =
      {
       post: "/api/v1/chains/{chain_id}/tokens"
       body: "*"
      };
  };

  rpc MintToken (MintTokenRequest) returns (MintTokenResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}/tokens/{token_name}"
       body: "*"
      };
  };

  rpc PlayTransactions (PlayTransactionsRequest) returns (PlayTransactionsResponse){
    option (google.api.http) =
      {
       put: "/api/v1/chains/{chain_id}"
       body: "*"
      };
  };

  rpc SendToken (SendTokenRequest) returns (SendTokenResponse){
    option (google.api.http) =
      {
       post: "/api/v1/chains/{chain_id}/tokens/{token_name}/send"
       body: "*"
      };
  };

  rpc ReceiveToken (ReceiveTokenRequest) returns (ReceiveTokenResponse){
    option (google.api.http) =
      {
       post: "/api/v1/chains/{chain_id}/tokens/receive"
       body: "*"
      };
  };
}
