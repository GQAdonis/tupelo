syntax = "proto3";

// extensions:
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;

package consensuspb;

enum SignatureType {
    BLSGroupSig = 0;
    //        Ed25119 = 1;
    Secp256k1 = 2;
}

enum ErrorCodes {
    SUCCESS = 0;
    INVALID = 1;
}

message SignatureRequest {
    string id = 1;
    repeated Block blocks = 2;
    repeated Chain histories = 3;
    bytes response_key = 4;
}

message SignatureResponse {
    string id = 1;
    string signer_id = 2;
    Block block = 3;
    ErrorCodes error = 4;
    string error_message = 5;
    bytes expected_hash = 6;
}

message Signature {
    string creator = 1;
    //signers is used for collective signing to signify which members of a NotaryGroup have signed
    repeated bool signers = 2;
    bytes signature = 3;
    SignatureType type = 4;
    bytes memo = 5;
}

message Transaction {
    string id = 1;
    enum TransactionType {
        ADD_DATA = 0;
        UPDATE_OWNERSHIP = 1;
        MINT_COIN = 2;
        SEND_COIN = 3;
        RECEIVE_COIN = 4;
        BALANCE = 5;
    }
    TransactionType type = 2;
    bytes payload = 3;
}

message AddDataTransaction {
    bytes bytes = 1;
}

message UpdateOwnershipTransaction {
    string chain_id = 1;
    Authentication authentication = 2;
    repeated Authorization authorizations = 3;
}

message MintCoinTransaction {
    string name = 1;
    uint64 amount = 2;
    bytes memo = 3;
}

message SendCoinTransaction {
    string id = 1;
    string destination = 2;
    uint64 amount = 3;
    string name = 4;
}

message ReceiveCoinTransaction {
    Transaction send_transaction = 1;
    Signature signature = 2;
}

message BalanceTransaction {
    string name = 1;
    uint64 balance = 2;
    repeated string transactions = 3; //TODO: make this an accumulator
}

message ChainTip {
    string id = 1;
    bytes last_hash = 2;
    uint64 sequence = 3;
    repeated Signature last_signatures = 4;
    Authentication authentication = 5;
    repeated Authorization authorizations = 6;
}

message Chain {
    string id = 1;
    repeated Block blocks = 2;
    Authentication authentication = 3;
    repeated Authorization authorizations = 4;
}

message Block {
    SignableBlock signable_block = 1;
    repeated Signature signatures = 2;
    repeated Signature transaction_signatures = 3;
}

message SignableBlock {
    string chain_id = 1;
    uint64 sequence = 2;
    bytes previous_hash = 3;
    bool genesis = 4;
    repeated Transaction transactions = 5;
}

message PublicKey {
    string id = 1;
    SignatureType type = 2;
    string chain_id = 3;
    string public_key_pem = 4;
    string public_key_base64 = 5;
    bytes public_key = 6;
}

message Authorization {
    enum Type {
        UPDATE = 0;
//        PROVE = 1;
//        CHANGE_OWNERSHIP = 2;
//        ALL = 3;
    }
    Type type = 1;
    uint64 minimum = 2;
    repeated Chain owners = 3;
}

message Authentication {
    repeated PublicKey public_keys = 1;
}