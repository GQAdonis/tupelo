// Code generated by protoc-gen-gogo.
// source: consensus.proto
// DO NOT EDIT!

/*
	Package consensuspb is a generated protocol buffer package.

	It is generated from these files:
		consensus.proto

	It has these top-level messages:
		NotaryGroup
		Signature
		Transaction
		AddDataTransaction
		UpdateOwnershipTransaction
		Chain
		Block
		SignableBlock
		PublicKey
		Authentication
		Did
*/
package consensuspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Signature_Type int32

const (
	BLSGroupSig Signature_Type = 0
	//        Ed25119 = 1;
	Secp256k1 Signature_Type = 2
)

var Signature_Type_name = map[int32]string{
	0: "BLSGroupSig",
	2: "Secp256k1",
}
var Signature_Type_value = map[string]int32{
	"BLSGroupSig": 0,
	"Secp256k1":   2,
}

func (Signature_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{1, 0} }

type Transaction_TransactionType int32

const (
	ADD_DATA         Transaction_TransactionType = 0
	UPDATE_OWNERSHIP Transaction_TransactionType = 1
)

var Transaction_TransactionType_name = map[int32]string{
	0: "ADD_DATA",
	1: "UPDATE_OWNERSHIP",
}
var Transaction_TransactionType_value = map[string]int32{
	"ADD_DATA":         0,
	"UPDATE_OWNERSHIP": 1,
}

func (Transaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConsensus, []int{2, 0}
}

type Authentication_Type int32

const (
	UPDATE           Authentication_Type = 0
	PROVE            Authentication_Type = 1
	CHANGE_OWNERSHIP Authentication_Type = 2
	ALL              Authentication_Type = 3
)

var Authentication_Type_name = map[int32]string{
	0: "UPDATE",
	1: "PROVE",
	2: "CHANGE_OWNERSHIP",
	3: "ALL",
}
var Authentication_Type_value = map[string]int32{
	"UPDATE":           0,
	"PROVE":            1,
	"CHANGE_OWNERSHIP": 2,
	"ALL":              3,
}

func (Authentication_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConsensus, []int{9, 0}
}

type NotaryGroup struct {
	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublicKeys [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys" json:"public_keys,omitempty"`
}

func (m *NotaryGroup) Reset()                    { *m = NotaryGroup{} }
func (*NotaryGroup) ProtoMessage()               {}
func (*NotaryGroup) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{0} }

func (m *NotaryGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotaryGroup) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type Signature struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// expected to be a bitmap
	Signers   []bool         `protobuf:"varint,2,rep,packed,name=signers" json:"signers,omitempty"`
	Signature []byte         `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Type      Signature_Type `protobuf:"varint,4,opt,name=type,proto3,enum=consensuspb.Signature_Type" json:"type,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{1} }

func (m *Signature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Signature) GetSigners() []bool {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetType() Signature_Type {
	if m != nil {
		return m.Type
	}
	return BLSGroupSig
}

type Transaction struct {
	Type    Transaction_TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=consensuspb.Transaction_TransactionType" json:"type,omitempty"`
	Payload []byte                      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{2} }

func (m *Transaction) GetType() Transaction_TransactionType {
	if m != nil {
		return m.Type
	}
	return ADD_DATA
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type AddDataTransaction struct {
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *AddDataTransaction) Reset()                    { *m = AddDataTransaction{} }
func (*AddDataTransaction) ProtoMessage()               {}
func (*AddDataTransaction) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{3} }

func (m *AddDataTransaction) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type UpdateOwnershipTransaction struct {
	Did *Did `protobuf:"bytes,1,opt,name=did" json:"did,omitempty"`
}

func (m *UpdateOwnershipTransaction) Reset()      { *m = UpdateOwnershipTransaction{} }
func (*UpdateOwnershipTransaction) ProtoMessage() {}
func (*UpdateOwnershipTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptorConsensus, []int{4}
}

func (m *UpdateOwnershipTransaction) GetDid() *Did {
	if m != nil {
		return m.Did
	}
	return nil
}

type Chain struct {
	Id     []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Blocks []*Block `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *Chain) Reset()                    { *m = Chain{} }
func (*Chain) ProtoMessage()               {}
func (*Chain) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{5} }

func (m *Chain) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Chain) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Block struct {
	SignableBlock *SignableBlock `protobuf:"bytes,1,opt,name=signable_block,json=signableBlock" json:"signable_block,omitempty"`
	Signatures    []*Signature   `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{6} }

func (m *Block) GetSignableBlock() *SignableBlock {
	if m != nil {
		return m.SignableBlock
	}
	return nil
}

func (m *Block) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type SignableBlock struct {
	ChainId      string         `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PreviousHash []byte         `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *SignableBlock) Reset()                    { *m = SignableBlock{} }
func (*SignableBlock) ProtoMessage()               {}
func (*SignableBlock) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{7} }

func (m *SignableBlock) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SignableBlock) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *SignableBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type PublicKey struct {
	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Owner           string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	PublicKeyPem    string `protobuf:"bytes,4,opt,name=public_key_pem,json=publicKeyPem,proto3" json:"public_key_pem,omitempty"`
	PublicKeyBase64 string `protobuf:"bytes,5,opt,name=public_key_base64,json=publicKeyBase64,proto3" json:"public_key_base64,omitempty"`
	PublicKey       []byte `protobuf:"bytes,6,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{8} }

func (m *PublicKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublicKey) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PublicKey) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PublicKey) GetPublicKeyPem() string {
	if m != nil {
		return m.PublicKeyPem
	}
	return ""
}

func (m *PublicKey) GetPublicKeyBase64() string {
	if m != nil {
		return m.PublicKeyBase64
	}
	return ""
}

func (m *PublicKey) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type Authentication struct {
	Type      Authentication_Type `protobuf:"varint,1,opt,name=type,proto3,enum=consensuspb.Authentication_Type" json:"type,omitempty"`
	Minimum   uint64              `protobuf:"varint,2,opt,name=minimum,proto3" json:"minimum,omitempty"`
	PublicKey []*PublicKey        `protobuf:"bytes,3,rep,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (m *Authentication) Reset()                    { *m = Authentication{} }
func (*Authentication) ProtoMessage()               {}
func (*Authentication) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{9} }

func (m *Authentication) GetType() Authentication_Type {
	if m != nil {
		return m.Type
	}
	return UPDATE
}

func (m *Authentication) GetMinimum() uint64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *Authentication) GetPublicKey() []*PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type Did struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// for future use
	//    repeated PublicKey public_key = 2;
	Authentication []*Authentication `protobuf:"bytes,3,rep,name=authentication" json:"authentication,omitempty"`
}

func (m *Did) Reset()                    { *m = Did{} }
func (*Did) ProtoMessage()               {}
func (*Did) Descriptor() ([]byte, []int) { return fileDescriptorConsensus, []int{10} }

func (m *Did) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Did) GetAuthentication() []*Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func init() {
	proto.RegisterType((*NotaryGroup)(nil), "consensuspb.NotaryGroup")
	proto.RegisterType((*Signature)(nil), "consensuspb.Signature")
	proto.RegisterType((*Transaction)(nil), "consensuspb.Transaction")
	proto.RegisterType((*AddDataTransaction)(nil), "consensuspb.AddDataTransaction")
	proto.RegisterType((*UpdateOwnershipTransaction)(nil), "consensuspb.UpdateOwnershipTransaction")
	proto.RegisterType((*Chain)(nil), "consensuspb.Chain")
	proto.RegisterType((*Block)(nil), "consensuspb.Block")
	proto.RegisterType((*SignableBlock)(nil), "consensuspb.SignableBlock")
	proto.RegisterType((*PublicKey)(nil), "consensuspb.PublicKey")
	proto.RegisterType((*Authentication)(nil), "consensuspb.Authentication")
	proto.RegisterType((*Did)(nil), "consensuspb.Did")
	proto.RegisterEnum("consensuspb.Signature_Type", Signature_Type_name, Signature_Type_value)
	proto.RegisterEnum("consensuspb.Transaction_TransactionType", Transaction_TransactionType_name, Transaction_TransactionType_value)
	proto.RegisterEnum("consensuspb.Authentication_Type", Authentication_Type_name, Authentication_Type_value)
}
func (x Signature_Type) String() string {
	s, ok := Signature_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Transaction_TransactionType) String() string {
	s, ok := Transaction_TransactionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Authentication_Type) String() string {
	s, ok := Authentication_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NotaryGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotaryGroup)
	if !ok {
		that2, ok := that.(NotaryGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.PublicKeys) != len(that1.PublicKeys) {
		return false
	}
	for i := range this.PublicKeys {
		if !bytes.Equal(this.PublicKeys[i], that1.PublicKeys[i]) {
			return false
		}
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if len(this.Signers) != len(that1.Signers) {
		return false
	}
	for i := range this.Signers {
		if this.Signers[i] != that1.Signers[i] {
			return false
		}
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Transaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Transaction)
	if !ok {
		that2, ok := that.(Transaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *AddDataTransaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddDataTransaction)
	if !ok {
		that2, ok := that.(AddDataTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Bytes, that1.Bytes) {
		return false
	}
	return true
}
func (this *UpdateOwnershipTransaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateOwnershipTransaction)
	if !ok {
		that2, ok := that.(UpdateOwnershipTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Did.Equal(that1.Did) {
		return false
	}
	return true
}
func (this *Chain) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Chain)
	if !ok {
		that2, ok := that.(Chain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	return true
}
func (this *Block) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Block)
	if !ok {
		that2, ok := that.(Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SignableBlock.Equal(that1.SignableBlock) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(that1.Signatures[i]) {
			return false
		}
	}
	return true
}
func (this *SignableBlock) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SignableBlock)
	if !ok {
		that2, ok := that.(SignableBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.PreviousHash, that1.PreviousHash) {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	return true
}
func (this *PublicKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublicKey)
	if !ok {
		that2, ok := that.(PublicKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.PublicKeyPem != that1.PublicKeyPem {
		return false
	}
	if this.PublicKeyBase64 != that1.PublicKeyBase64 {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	return true
}
func (this *Authentication) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Authentication)
	if !ok {
		that2, ok := that.(Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if len(this.PublicKey) != len(that1.PublicKey) {
		return false
	}
	for i := range this.PublicKey {
		if !this.PublicKey[i].Equal(that1.PublicKey[i]) {
			return false
		}
	}
	return true
}
func (this *Did) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Did)
	if !ok {
		that2, ok := that.(Did)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if len(this.Authentication) != len(that1.Authentication) {
		return false
	}
	for i := range this.Authentication {
		if !this.Authentication[i].Equal(that1.Authentication[i]) {
			return false
		}
	}
	return true
}
func (this *NotaryGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&consensuspb.NotaryGroup{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "PublicKeys: "+fmt.Sprintf("%#v", this.PublicKeys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Signature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&consensuspb.Signature{")
	s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	s = append(s, "Signers: "+fmt.Sprintf("%#v", this.Signers)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&consensuspb.Transaction{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDataTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&consensuspb.AddDataTransaction{")
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOwnershipTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&consensuspb.UpdateOwnershipTransaction{")
	if this.Did != nil {
		s = append(s, "Did: "+fmt.Sprintf("%#v", this.Did)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Chain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&consensuspb.Chain{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Blocks != nil {
		s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&consensuspb.Block{")
	if this.SignableBlock != nil {
		s = append(s, "SignableBlock: "+fmt.Sprintf("%#v", this.SignableBlock)+",\n")
	}
	if this.Signatures != nil {
		s = append(s, "Signatures: "+fmt.Sprintf("%#v", this.Signatures)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignableBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&consensuspb.SignableBlock{")
	s = append(s, "ChainId: "+fmt.Sprintf("%#v", this.ChainId)+",\n")
	s = append(s, "PreviousHash: "+fmt.Sprintf("%#v", this.PreviousHash)+",\n")
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublicKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&consensuspb.PublicKey{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "PublicKeyPem: "+fmt.Sprintf("%#v", this.PublicKeyPem)+",\n")
	s = append(s, "PublicKeyBase64: "+fmt.Sprintf("%#v", this.PublicKeyBase64)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&consensuspb.Authentication{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Minimum: "+fmt.Sprintf("%#v", this.Minimum)+",\n")
	if this.PublicKey != nil {
		s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Did) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&consensuspb.Did{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Authentication != nil {
		s = append(s, "Authentication: "+fmt.Sprintf("%#v", this.Authentication)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConsensus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NotaryGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotaryGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintConsensus(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if len(m.Signers) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Signers)))
		for _, b := range m.Signers {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(m.Type))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *AddDataTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDataTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	return i, nil
}

func (m *UpdateOwnershipTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOwnershipTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Did != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(m.Did.Size()))
		n1, err := m.Did.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintConsensus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignableBlock != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(m.SignableBlock.Size()))
		n2, err := m.SignableBlock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintConsensus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SignableBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignableBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.ChainId)))
		i += copy(dAtA[i:], m.ChainId)
	}
	if len(m.PreviousHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.PreviousHash)))
		i += copy(dAtA[i:], m.PreviousHash)
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintConsensus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.PublicKeyPem) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.PublicKeyPem)))
		i += copy(dAtA[i:], m.PublicKeyPem)
	}
	if len(m.PublicKeyBase64) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.PublicKeyBase64)))
		i += copy(dAtA[i:], m.PublicKeyBase64)
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	return i, nil
}

func (m *Authentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authentication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(m.Type))
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(m.Minimum))
	}
	if len(m.PublicKey) > 0 {
		for _, msg := range m.PublicKey {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintConsensus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Did) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Did) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Authentication) > 0 {
		for _, msg := range m.Authentication {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintConsensus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Consensus(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Consensus(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConsensus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedNotaryGroup(r randyConsensus, easy bool) *NotaryGroup {
	this := &NotaryGroup{}
	this.Id = string(randStringConsensus(r))
	v1 := r.Intn(10)
	this.PublicKeys = make([][]byte, v1)
	for i := 0; i < v1; i++ {
		v2 := r.Intn(100)
		this.PublicKeys[i] = make([]byte, v2)
		for j := 0; j < v2; j++ {
			this.PublicKeys[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignature(r randyConsensus, easy bool) *Signature {
	this := &Signature{}
	this.Creator = string(randStringConsensus(r))
	v3 := r.Intn(10)
	this.Signers = make([]bool, v3)
	for i := 0; i < v3; i++ {
		this.Signers[i] = bool(bool(r.Intn(2) == 0))
	}
	v4 := r.Intn(100)
	this.Signature = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	this.Type = Signature_Type([]int32{0, 2}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransaction(r randyConsensus, easy bool) *Transaction {
	this := &Transaction{}
	this.Type = Transaction_TransactionType([]int32{0, 1}[r.Intn(2)])
	v5 := r.Intn(100)
	this.Payload = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAddDataTransaction(r randyConsensus, easy bool) *AddDataTransaction {
	this := &AddDataTransaction{}
	v6 := r.Intn(100)
	this.Bytes = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Bytes[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateOwnershipTransaction(r randyConsensus, easy bool) *UpdateOwnershipTransaction {
	this := &UpdateOwnershipTransaction{}
	if r.Intn(10) != 0 {
		this.Did = NewPopulatedDid(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChain(r randyConsensus, easy bool) *Chain {
	this := &Chain{}
	v7 := r.Intn(100)
	this.Id = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Blocks = make([]*Block, v8)
		for i := 0; i < v8; i++ {
			this.Blocks[i] = NewPopulatedBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlock(r randyConsensus, easy bool) *Block {
	this := &Block{}
	if r.Intn(10) != 0 {
		this.SignableBlock = NewPopulatedSignableBlock(r, easy)
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Signatures = make([]*Signature, v9)
		for i := 0; i < v9; i++ {
			this.Signatures[i] = NewPopulatedSignature(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignableBlock(r randyConsensus, easy bool) *SignableBlock {
	this := &SignableBlock{}
	this.ChainId = string(randStringConsensus(r))
	v10 := r.Intn(100)
	this.PreviousHash = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.PreviousHash[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Transactions = make([]*Transaction, v11)
		for i := 0; i < v11; i++ {
			this.Transactions[i] = NewPopulatedTransaction(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublicKey(r randyConsensus, easy bool) *PublicKey {
	this := &PublicKey{}
	this.Id = string(randStringConsensus(r))
	this.Type = string(randStringConsensus(r))
	this.Owner = string(randStringConsensus(r))
	this.PublicKeyPem = string(randStringConsensus(r))
	this.PublicKeyBase64 = string(randStringConsensus(r))
	v12 := r.Intn(100)
	this.PublicKey = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.PublicKey[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthentication(r randyConsensus, easy bool) *Authentication {
	this := &Authentication{}
	this.Type = Authentication_Type([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Minimum = uint64(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.PublicKey = make([]*PublicKey, v13)
		for i := 0; i < v13; i++ {
			this.PublicKey[i] = NewPopulatedPublicKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDid(r randyConsensus, easy bool) *Did {
	this := &Did{}
	v14 := r.Intn(100)
	this.Id = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.Authentication = make([]*Authentication, v15)
		for i := 0; i < v15; i++ {
			this.Authentication[i] = NewPopulatedAuthentication(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyConsensus interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneConsensus(r randyConsensus) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringConsensus(r randyConsensus) string {
	v16 := r.Intn(100)
	tmps := make([]rune, v16)
	for i := 0; i < v16; i++ {
		tmps[i] = randUTF8RuneConsensus(r)
	}
	return string(tmps)
}
func randUnrecognizedConsensus(r randyConsensus, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldConsensus(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldConsensus(dAtA []byte, r randyConsensus, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateConsensus(dAtA, uint64(key))
		v17 := r.Int63()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		dAtA = encodeVarintPopulateConsensus(dAtA, uint64(v17))
	case 1:
		dAtA = encodeVarintPopulateConsensus(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateConsensus(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateConsensus(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateConsensus(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateConsensus(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *NotaryGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			l = len(b)
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func (m *Signature) Size() (n int) {
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if len(m.Signers) > 0 {
		n += 1 + sovConsensus(uint64(len(m.Signers))) + len(m.Signers)*1
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovConsensus(uint64(m.Type))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConsensus(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *AddDataTransaction) Size() (n int) {
	var l int
	_ = l
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *UpdateOwnershipTransaction) Size() (n int) {
	var l int
	_ = l
	if m.Did != nil {
		l = m.Did.Size()
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *Chain) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func (m *Block) Size() (n int) {
	var l int
	_ = l
	if m.SignableBlock != nil {
		l = m.SignableBlock.Size()
		n += 1 + l + sovConsensus(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func (m *SignableBlock) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.PreviousHash)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func (m *PublicKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.PublicKeyPem)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.PublicKeyBase64)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *Authentication) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConsensus(uint64(m.Type))
	}
	if m.Minimum != 0 {
		n += 1 + sovConsensus(uint64(m.Minimum))
	}
	if len(m.PublicKey) > 0 {
		for _, e := range m.PublicKey {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func (m *Did) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if len(m.Authentication) > 0 {
		for _, e := range m.Authentication {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func sovConsensus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConsensus(x uint64) (n int) {
	return sovConsensus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NotaryGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotaryGroup{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`PublicKeys:` + fmt.Sprintf("%v", this.PublicKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature{`,
		`Creator:` + fmt.Sprintf("%v", this.Creator) + `,`,
		`Signers:` + fmt.Sprintf("%v", this.Signers) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDataTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDataTransaction{`,
		`Bytes:` + fmt.Sprintf("%v", this.Bytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOwnershipTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOwnershipTransaction{`,
		`Did:` + strings.Replace(fmt.Sprintf("%v", this.Did), "Did", "Did", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Chain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Chain{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Blocks:` + strings.Replace(fmt.Sprintf("%v", this.Blocks), "Block", "Block", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Block{`,
		`SignableBlock:` + strings.Replace(fmt.Sprintf("%v", this.SignableBlock), "SignableBlock", "SignableBlock", 1) + `,`,
		`Signatures:` + strings.Replace(fmt.Sprintf("%v", this.Signatures), "Signature", "Signature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignableBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignableBlock{`,
		`ChainId:` + fmt.Sprintf("%v", this.ChainId) + `,`,
		`PreviousHash:` + fmt.Sprintf("%v", this.PreviousHash) + `,`,
		`Transactions:` + strings.Replace(fmt.Sprintf("%v", this.Transactions), "Transaction", "Transaction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublicKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublicKey{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`PublicKeyPem:` + fmt.Sprintf("%v", this.PublicKeyPem) + `,`,
		`PublicKeyBase64:` + fmt.Sprintf("%v", this.PublicKeyBase64) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Authentication{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Minimum:` + fmt.Sprintf("%v", this.Minimum) + `,`,
		`PublicKey:` + strings.Replace(fmt.Sprintf("%v", this.PublicKey), "PublicKey", "PublicKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Did) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Did{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "Authentication", "Authentication", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConsensus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NotaryGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotaryGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotaryGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeys[len(m.PublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConsensus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Signers = append(m.Signers, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConsensus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConsensus
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConsensus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Signers = append(m.Signers, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Signature_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Transaction_TransactionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDataTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDataTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDataTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOwnershipTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOwnershipTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOwnershipTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Did == nil {
				m.Did = &Did{}
			}
			if err := m.Did.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignableBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignableBlock == nil {
				m.SignableBlock = &SignableBlock{}
			}
			if err := m.SignableBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignableBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignableBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignableBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousHash = append(m.PreviousHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousHash == nil {
				m.PreviousHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyPem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyPem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyBase64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyBase64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Authentication_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey, &PublicKey{})
			if err := m.PublicKey[len(m.PublicKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Did) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Did: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Did: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentication = append(m.Authentication, &Authentication{})
			if err := m.Authentication[len(m.Authentication)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConsensus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConsensus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConsensus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConsensus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensus   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("consensus.proto", fileDescriptorConsensus) }

var fileDescriptorConsensus = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xce, 0xc4, 0x4d, 0xda, 0xbc, 0x71, 0x12, 0x33, 0xaa, 0x90, 0xe9, 0x82, 0x89, 0x0c, 0x42,
	0x51, 0x25, 0x52, 0x08, 0xdb, 0x9e, 0x2a, 0x84, 0x93, 0x54, 0xdb, 0x15, 0x55, 0x1b, 0x4d, 0xb2,
	0x20, 0x71, 0x89, 0xc6, 0xf6, 0x90, 0x8c, 0x9a, 0xd8, 0x96, 0x3f, 0x40, 0xb9, 0x21, 0xee, 0x48,
	0xfc, 0x00, 0x7e, 0x00, 0xbf, 0x80, 0xdf, 0xc0, 0x71, 0x2f, 0x48, 0x1c, 0x49, 0xb8, 0x70, 0xdc,
	0x23, 0x47, 0xe4, 0xf1, 0x47, 0xec, 0x6d, 0xd9, 0x9b, 0x9f, 0x77, 0x9e, 0x79, 0x3f, 0xe6, 0x79,
	0x1f, 0x43, 0xc7, 0x72, 0x9d, 0x80, 0x39, 0x41, 0x14, 0xf4, 0x3d, 0xdf, 0x0d, 0x5d, 0xdc, 0xcc,
	0x03, 0x9e, 0x79, 0xf2, 0xf1, 0x82, 0x87, 0xcb, 0xc8, 0xec, 0x5b, 0xee, 0xfa, 0x6c, 0xe1, 0x2e,
	0xdc, 0x33, 0xc1, 0x31, 0xa3, 0x6f, 0x05, 0x12, 0x40, 0x7c, 0x25, 0x77, 0xf5, 0xcf, 0xa1, 0x79,
	0xeb, 0x86, 0xd4, 0xdf, 0x3c, 0xf3, 0xdd, 0xc8, 0xc3, 0x6d, 0xa8, 0x72, 0x5b, 0x45, 0x5d, 0xd4,
	0x6b, 0x90, 0x2a, 0xb7, 0xf1, 0xfb, 0xd0, 0xf4, 0x22, 0x73, 0xc5, 0xad, 0xf9, 0x3d, 0xdb, 0x04,
	0x6a, 0xb5, 0x2b, 0xf5, 0x64, 0x02, 0x49, 0xe8, 0x4b, 0xb6, 0x09, 0xf4, 0xdf, 0x10, 0x34, 0xa6,
	0x7c, 0xe1, 0xd0, 0x30, 0xf2, 0x19, 0x56, 0xe1, 0xd0, 0xf2, 0x19, 0x0d, 0x5d, 0x3f, 0xcd, 0x91,
	0xc1, 0xf8, 0x24, 0xe0, 0x0b, 0x87, 0xf9, 0x49, 0x92, 0x23, 0x92, 0x41, 0xfc, 0x2e, 0x34, 0x82,
	0x2c, 0x81, 0x2a, 0x75, 0x51, 0x4f, 0x26, 0xfb, 0x00, 0x3e, 0x83, 0x83, 0x70, 0xe3, 0x31, 0xf5,
	0xa0, 0x8b, 0x7a, 0xed, 0xc1, 0x93, 0x7e, 0x61, 0xd4, 0x7e, 0x5e, 0xb7, 0x3f, 0xdb, 0x78, 0x8c,
	0x08, 0xa2, 0xfe, 0x11, 0x1c, 0xc4, 0x08, 0x77, 0xa0, 0x39, 0xbc, 0x99, 0x8a, 0xa9, 0xa6, 0x7c,
	0xa1, 0x54, 0x70, 0x0b, 0x1a, 0x53, 0x66, 0x79, 0x83, 0xf3, 0x8b, 0xfb, 0x4f, 0x95, 0xaa, 0xfe,
	0x0b, 0x82, 0xe6, 0xcc, 0xa7, 0x4e, 0x40, 0xad, 0x90, 0xbb, 0x0e, 0xbe, 0x4c, 0x0b, 0x21, 0x51,
	0xa8, 0x57, 0x2a, 0x54, 0xe0, 0x15, 0xbf, 0xf7, 0x55, 0xe3, 0xf1, 0x3c, 0xba, 0x59, 0xb9, 0xd4,
	0x56, 0xab, 0x62, 0x84, 0x0c, 0xea, 0xe7, 0xd0, 0x79, 0xed, 0x0a, 0x96, 0xe1, 0xc8, 0x18, 0x8f,
	0xe7, 0x63, 0x63, 0x66, 0x28, 0x15, 0x7c, 0x0c, 0xca, 0x8b, 0xc9, 0xd8, 0x98, 0x5d, 0xcd, 0xef,
	0xbe, 0xbe, 0xbd, 0x22, 0xd3, 0xeb, 0xe7, 0x13, 0x05, 0xe9, 0xa7, 0x80, 0x0d, 0xdb, 0x1e, 0xd3,
	0x90, 0x16, 0x9b, 0x3c, 0x86, 0x9a, 0xb9, 0x09, 0x59, 0x20, 0xba, 0x94, 0x49, 0x02, 0xf4, 0x2f,
	0xe0, 0xe4, 0x85, 0x67, 0xd3, 0x90, 0xdd, 0x7d, 0x1f, 0xbf, 0xe8, 0x92, 0x7b, 0xc5, 0x3b, 0x3a,
	0x48, 0x76, 0xaa, 0x69, 0x73, 0xa0, 0x94, 0xe6, 0x1a, 0x73, 0x9b, 0xc4, 0x87, 0xfa, 0x08, 0x6a,
	0xa3, 0x25, 0xe5, 0x4e, 0x41, 0x7f, 0x59, 0xe8, 0x7f, 0x0a, 0x75, 0x73, 0xe5, 0x5a, 0xf7, 0x89,
	0x6a, 0xcd, 0x01, 0x2e, 0xdd, 0x1f, 0xc6, 0x47, 0x24, 0x65, 0xe8, 0x3f, 0x22, 0xa8, 0x89, 0x08,
	0x36, 0xa0, 0x2d, 0x14, 0x34, 0x57, 0x6c, 0x2e, 0x0e, 0xd3, 0xea, 0x27, 0x0f, 0xe5, 0x33, 0x57,
	0x2c, 0xc9, 0xd2, 0x0a, 0x8a, 0x10, 0x5f, 0x00, 0xe4, 0x4b, 0x90, 0x15, 0x7f, 0xfb, 0x71, 0xf5,
	0x49, 0x81, 0xa9, 0xff, 0x84, 0xa0, 0x55, 0x4a, 0x8c, 0xdf, 0x81, 0x23, 0x2b, 0x9e, 0x6d, 0x9e,
	0x2f, 0xf6, 0xa1, 0xc0, 0xcf, 0x6d, 0xfc, 0x01, 0xb4, 0x3c, 0x9f, 0x7d, 0xc7, 0xdd, 0x28, 0x98,
	0x2f, 0x69, 0xb0, 0x4c, 0xb5, 0x93, 0xb3, 0xe0, 0x35, 0x0d, 0x96, 0xf8, 0x12, 0xe4, 0x70, 0xff,
	0x9c, 0x81, 0x2a, 0x89, 0x5e, 0xd4, 0xff, 0x5b, 0x10, 0x52, 0x62, 0x0b, 0x7f, 0x4c, 0x32, 0xbb,
	0x3c, 0xb0, 0x17, 0x4e, 0x97, 0xae, 0x2a, 0x22, 0xc9, 0x2a, 0x1d, 0x43, 0xcd, 0x8d, 0x75, 0x14,
	0x5e, 0x68, 0x90, 0x04, 0xe0, 0x0f, 0xa1, 0xbd, 0x37, 0xe2, 0xdc, 0x63, 0x6b, 0xe1, 0x88, 0x06,
	0x91, 0x73, 0x2f, 0x4e, 0xd8, 0x1a, 0x9f, 0xc2, 0x5b, 0x05, 0x96, 0x49, 0x03, 0x76, 0xf1, 0x54,
	0xad, 0x09, 0x62, 0x27, 0x27, 0x0e, 0x45, 0x18, 0xbf, 0x07, 0xb0, 0xe7, 0xaa, 0xf5, 0xc4, 0x78,
	0x39, 0x49, 0xff, 0x03, 0x41, 0xdb, 0x88, 0xc2, 0x25, 0x73, 0x42, 0x6e, 0x51, 0xb1, 0x49, 0x4f,
	0x4b, 0x16, 0xe9, 0x96, 0x5e, 0xa0, 0x4c, 0xed, 0x97, 0xad, 0xb1, 0xe6, 0x0e, 0x5f, 0x47, 0x6b,
	0x31, 0xe6, 0x01, 0xc9, 0x20, 0x3e, 0x2f, 0x75, 0x20, 0x3d, 0xa2, 0x71, 0xfe, 0x72, 0xc5, 0xce,
	0x2e, 0x53, 0x87, 0x03, 0xd4, 0x13, 0xe3, 0x28, 0x15, 0xdc, 0x80, 0xda, 0x84, 0xdc, 0x7d, 0x75,
	0xa5, 0xa0, 0xd8, 0x4f, 0xa3, 0x6b, 0xe3, 0xf6, 0x59, 0xd1, 0x4f, 0x55, 0x7c, 0x08, 0x92, 0x71,
	0x73, 0xa3, 0x48, 0xfa, 0x37, 0x20, 0x8d, 0xb9, 0xfd, 0x60, 0xd1, 0x47, 0xd0, 0xa6, 0xa5, 0x11,
	0xd2, 0x7e, 0x9e, 0xbc, 0x61, 0x4a, 0xf2, 0xda, 0x95, 0xe1, 0x27, 0x2f, 0xb7, 0x5a, 0xe5, 0xcf,
	0xad, 0x56, 0x79, 0xb5, 0xd5, 0xd0, 0xbf, 0x5b, 0x0d, 0xfd, 0xb0, 0xd3, 0xd0, 0xaf, 0x3b, 0x0d,
	0xfd, 0xbe, 0xd3, 0xd0, 0xcb, 0x9d, 0x86, 0xfe, 0xda, 0x69, 0xe8, 0x9f, 0x9d, 0x56, 0x79, 0xb5,
	0xd3, 0xd0, 0xcf, 0x7f, 0x6b, 0x15, 0xb3, 0x2e, 0xfe, 0xc2, 0x9f, 0xfd, 0x17, 0x00, 0x00, 0xff,
	0xff, 0xbe, 0x19, 0xf4, 0x55, 0xd4, 0x05, 0x00, 0x00,
}
