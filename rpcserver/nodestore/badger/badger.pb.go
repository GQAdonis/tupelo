// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodestore/badger/badger.proto

package badger // import "github.com/quorumcontrol/tupelo/rpcserver/nodestore/badger"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import nodestore "github.com/quorumcontrol/tupelo/rpcserver/nodestore"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_badger_71218598b8dde332, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "tupelo.nodestore.badger.Config")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BadgerNodestoreServiceClient is the client API for BadgerNodestoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BadgerNodestoreServiceClient interface {
	Get(ctx context.Context, in *nodestore.GetRequest, opts ...grpc.CallOption) (*nodestore.GetResponse, error)
	Put(ctx context.Context, in *nodestore.PutRequest, opts ...grpc.CallOption) (*nodestore.PutResponse, error)
	Delete(ctx context.Context, in *nodestore.DeleteRequest, opts ...grpc.CallOption) (*nodestore.ConfirmationResponse, error)
}

type badgerNodestoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewBadgerNodestoreServiceClient(cc *grpc.ClientConn) BadgerNodestoreServiceClient {
	return &badgerNodestoreServiceClient{cc}
}

func (c *badgerNodestoreServiceClient) Get(ctx context.Context, in *nodestore.GetRequest, opts ...grpc.CallOption) (*nodestore.GetResponse, error) {
	out := new(nodestore.GetResponse)
	err := c.cc.Invoke(ctx, "/tupelo.nodestore.badger.BadgerNodestoreService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerNodestoreServiceClient) Put(ctx context.Context, in *nodestore.PutRequest, opts ...grpc.CallOption) (*nodestore.PutResponse, error) {
	out := new(nodestore.PutResponse)
	err := c.cc.Invoke(ctx, "/tupelo.nodestore.badger.BadgerNodestoreService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerNodestoreServiceClient) Delete(ctx context.Context, in *nodestore.DeleteRequest, opts ...grpc.CallOption) (*nodestore.ConfirmationResponse, error) {
	out := new(nodestore.ConfirmationResponse)
	err := c.cc.Invoke(ctx, "/tupelo.nodestore.badger.BadgerNodestoreService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadgerNodestoreServiceServer is the server API for BadgerNodestoreService service.
type BadgerNodestoreServiceServer interface {
	Get(context.Context, *nodestore.GetRequest) (*nodestore.GetResponse, error)
	Put(context.Context, *nodestore.PutRequest) (*nodestore.PutResponse, error)
	Delete(context.Context, *nodestore.DeleteRequest) (*nodestore.ConfirmationResponse, error)
}

func RegisterBadgerNodestoreServiceServer(s *grpc.Server, srv BadgerNodestoreServiceServer) {
	s.RegisterService(&_BadgerNodestoreService_serviceDesc, srv)
}

func _BadgerNodestoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodestore.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerNodestoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tupelo.nodestore.badger.BadgerNodestoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerNodestoreServiceServer).Get(ctx, req.(*nodestore.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgerNodestoreService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodestore.PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerNodestoreServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tupelo.nodestore.badger.BadgerNodestoreService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerNodestoreServiceServer).Put(ctx, req.(*nodestore.PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgerNodestoreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodestore.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerNodestoreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tupelo.nodestore.badger.BadgerNodestoreService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerNodestoreServiceServer).Delete(ctx, req.(*nodestore.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BadgerNodestoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tupelo.nodestore.badger.BadgerNodestoreService",
	HandlerType: (*BadgerNodestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BadgerNodestoreService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _BadgerNodestoreService_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BadgerNodestoreService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodestore/badger/badger.proto",
}

func init() {
	proto.RegisterFile("nodestore/badger/badger.proto", fileDescriptor_badger_71218598b8dde332)
}

var fileDescriptor_badger_71218598b8dde332 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x29, 0x4a, 0xc1, 0x1c, 0x73, 0xf0, 0x63, 0xd9, 0x45, 0xf1, 0x20, 0x9e, 0x12, 0xd0,
	0x9b, 0x78, 0xaa, 0xc2, 0xde, 0x64, 0x5d, 0x6f, 0xde, 0xda, 0xec, 0xd8, 0x0d, 0xb4, 0x99, 0xec,
	0x64, 0xd2, 0x3f, 0xee, 0x1f, 0x10, 0xd2, 0xd6, 0x82, 0x55, 0x4f, 0x09, 0x3c, 0xef, 0xfb, 0x84,
	0xcc, 0x88, 0x95, 0xc3, 0x1d, 0x04, 0x46, 0x02, 0x5d, 0x95, 0xbb, 0x1a, 0x68, 0x38, 0x94, 0x27,
	0x64, 0x94, 0x67, 0x1c, 0x3d, 0x34, 0xa8, 0xbe, 0x53, 0xaa, 0xc7, 0x8b, 0x8b, 0xa9, 0x37, 0xb1,
	0xd4, 0xb9, 0x5e, 0x8a, 0xfc, 0x09, 0xdd, 0x87, 0xad, 0xa5, 0x14, 0xc7, 0xbe, 0xe4, 0xfd, 0x79,
	0x76, 0x95, 0xdd, 0x9e, 0x6c, 0xd3, 0xfd, 0xee, 0x33, 0x13, 0xa7, 0x45, 0x72, 0xbc, 0x8c, 0xbd,
	0x37, 0xa0, 0xce, 0x1a, 0x90, 0x85, 0x38, 0x5a, 0x03, 0xcb, 0xa5, 0x9a, 0x3d, 0xba, 0x06, 0xde,
	0xc2, 0x21, 0x42, 0xe0, 0xc5, 0xea, 0x0f, 0x1a, 0x3c, 0xba, 0x90, 0x1c, 0x9b, 0xf8, 0xab, 0x63,
	0x13, 0xff, 0x73, 0x24, 0x3a, 0x38, 0x5e, 0x45, 0xfe, 0x0c, 0x0d, 0x30, 0xc8, 0xcb, 0x79, 0xb0,
	0x27, 0xa3, 0xe9, 0x66, 0x1e, 0x48, 0x7f, 0xa7, 0xb6, 0x64, 0x8b, 0x6e, 0x54, 0x16, 0x8f, 0xef,
	0x0f, 0xb5, 0xe5, 0x7d, 0xac, 0x94, 0xc1, 0x56, 0x1f, 0x22, 0x52, 0x6c, 0x0d, 0x3a, 0x26, 0x6c,
	0x74, 0x6f, 0xd0, 0xe4, 0x4d, 0x00, 0xea, 0x80, 0xf4, 0xcf, 0x95, 0x54, 0x79, 0x1a, 0xec, 0xfd,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x14, 0xc3, 0x43, 0xad, 0x01, 0x00, 0x00,
}
